package JMRVideoExtension;


import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import java.awt.image.BufferedImage;
import java.awt.Cursor;
import javax.imageio.ImageIO;
import uk.co.caprica.vlcj.binding.LibVlc;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;
import JMRVideoExtension.iu.VentanaInternaMix;
import JMRVideoExtension.iu.VentanaInternaVideo;
import JMRVideoExtension.iu.VentanaInterna;
import JMRVideoExtension.funciones.KeyFrameCollection;
import JMRVideoExtension.funciones.VideoComparador;
import JMRVideoExtension.funciones.VideoIteradorSVD;
import JMRVideoExtension.funciones.VideoSegmentationOp;
import static JMRVideoExtension.funciones.KeyFrameCollection.mostrar_Frames;
import static JMRVideoExtension.funciones.KeyFrameCollection.redimensionar_Imagen;
import static JMRVideoExtension.funciones.VideoIOVLC.conversion_Mat2BufImg;
import static JMRVideoExtension.funciones.VideoIOVLC.guardar_KeyFrames;
import static JMRVideoExtension.funciones.VideoIOVLC.leer_video;
import static JMRVideoExtension.funciones.VideoIOVLC.leer_video_guardar;
import static JMRVideoExtension.funciones.VideoIOVLC.add_Imagen;
import static JMRVideoExtension.funciones.VideoSegmentationOp.calculo_Keyframes;
import java.io.IOException;
import jmr.db.ListDB;
import jmr.db.ListDB.Record;
import jmr.descriptor.DescriptorList;
import jmr.descriptor.MediaDescriptor;
import jmr.descriptor.color.MPEG7ColorStructure;
import jmr.descriptor.color.MPEG7ScalableColor;
import jmr.descriptor.color.SingleColorDescriptor;
import jmr.video.KeyFrameDescriptor;
import jmr.video.Video;


/**
 *
 * @author David Martinez Domingo
 */

public class App extends javax.swing.JFrame {

    
    /**
     * Constructor
     */
    public App() {
        initComponents();
        this.setSize(1920, 1020);
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        activarBotonesDB(false);
    }
    
    /**
     * Filtro de extension para los archivos en la seleccion de una imagen
     */
    FileNameExtensionFilter filtro_extension_Img = new FileNameExtensionFilter("Archivos de imagen ( jpg, jpeg, gif, png )", "jpg", "jpeg", "gif", "png");    
    FileNameExtensionFilter filtro_extension_Vid = new FileNameExtensionFilter("Archivos de video ( mp4 )", "mp4");    
    
    
    /**
     * Boolean que comprueba si el slider del tiempo de reproducción del video se está ajustando
     */
    private boolean isAdjusting = false;
    
    
    /**
     * Boolean para comprobar si el archivo abierto es una imagen o un vídeo
     */
    private static boolean isImage = false;
    
    
    /**
     * Objeto de la clase VideoSegmentacion para obtener los valores por defecto que estarán en el layout
     */
    VideoSegmentationOp VS = new VideoSegmentationOp();
    
   
    /**
     * Descriptor usado por defecto en la clase KeyFrameDescriptor
     */                                       
    public static Class DEFAULT_FRAME_DESCRIPTOR = MPEG7ScalableColor.class;
   
    
    /**
     * Cantidad de resultados que se mostrarán al hacer la busqueda de similares
     */
    public int numResultados = 5;
    

    
    ListDB<KeyFrameDescriptor> database = null;
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        escritorio = new javax.swing.JDesktopPane();
        jToolBar1 = new javax.swing.JToolBar();
        botonAbrirImagen = new javax.swing.JButton();
        botonAbrirVideo = new javax.swing.JButton();
        botonNewDB = new javax.swing.JButton();
        botonCloseDB = new javax.swing.JButton();
        botonAddRecord = new javax.swing.JButton();
        botonSearch = new javax.swing.JButton();
        botonOpenDB = new javax.swing.JButton();
        botonSaveDB = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        botonFrames = new javax.swing.JButton();
        botonPlay = new javax.swing.JButton();
        botonStop = new javax.swing.JButton();
        botonReset = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        sliderVideoProgreso = new javax.swing.JSlider();
        tiempo = new javax.swing.JLabel();
        botonKeyframes = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        sliderK = new javax.swing.JSlider();
        jPanel4 = new javax.swing.JPanel();
        sliderUmbralSim = new javax.swing.JSlider();
        jPanel5 = new javax.swing.JPanel();
        sliderIntervalo = new javax.swing.JSlider();
        botonComparar = new javax.swing.JButton();
        spinerNumResultados = new javax.swing.JSpinner();
        listaDescriptores = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        botonAbrirImagen2 = new javax.swing.JMenuItem();
        botonAbrirVideo2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        clearAll = new javax.swing.JMenuItem();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1550, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 526, Short.MAX_VALUE)
        );

        jPanel1.add(escritorio, java.awt.BorderLayout.CENTER);

        jToolBar1.setRollover(true);

        botonAbrirImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/iconos/abrirImagen.png"))); // NOI18N
        botonAbrirImagen.setToolTipText("Abrir Imagen");
        botonAbrirImagen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonAbrirImagen.setFocusable(false);
        botonAbrirImagen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrirImagen.setMinimumSize(new java.awt.Dimension(32, 30));
        botonAbrirImagen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrirImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirImagenActionPerformed(evt);
            }
        });
        jToolBar1.add(botonAbrirImagen);

        botonAbrirVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/iconos/abrirVideo.png"))); // NOI18N
        botonAbrirVideo.setToolTipText("Abrir Video");
        botonAbrirVideo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonAbrirVideo.setFocusable(false);
        botonAbrirVideo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrirVideo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrirVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirVideoActionPerformed(evt);
            }
        });
        jToolBar1.add(botonAbrirVideo);

        botonNewDB.setText("NewDB");
        botonNewDB.setToolTipText("Crear nueva Base de Datos");
        botonNewDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonNewDB.setFocusable(false);
        botonNewDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNewDB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNewDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNewDBActionPerformed(evt);
            }
        });
        jToolBar1.add(botonNewDB);

        botonCloseDB.setText("CloseDB");
        botonCloseDB.setToolTipText("Cerrar Base de Datos");
        botonCloseDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonCloseDB.setFocusable(false);
        botonCloseDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCloseDB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCloseDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCloseDBActionPerformed(evt);
            }
        });
        jToolBar1.add(botonCloseDB);

        botonAddRecord.setText("AddRecord");
        botonAddRecord.setToolTipText("Añadir archivo a Base de Datos");
        botonAddRecord.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonAddRecord.setFocusable(false);
        botonAddRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAddRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAddRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAddRecordActionPerformed(evt);
            }
        });
        jToolBar1.add(botonAddRecord);

        botonSearch.setText("Search");
        botonSearch.setToolTipText("Buscar en la Base de Datos");
        botonSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonSearch.setFocusable(false);
        botonSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonSearch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSearchActionPerformed(evt);
            }
        });
        jToolBar1.add(botonSearch);

        botonOpenDB.setText("OpenDB");
        botonOpenDB.setToolTipText("Abrir una Base de Datos");
        botonOpenDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonOpenDB.setFocusable(false);
        botonOpenDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonOpenDB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonOpenDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpenDBActionPerformed(evt);
            }
        });
        jToolBar1.add(botonOpenDB);

        botonSaveDB.setText("SaveDB");
        botonSaveDB.setToolTipText("Guardar Base de Datos");
        botonSaveDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonSaveDB.setFocusable(false);
        botonSaveDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonSaveDB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonSaveDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSaveDBActionPerformed(evt);
            }
        });
        jToolBar1.add(botonSaveDB);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/iconos/savekey.png"))); // NOI18N
        botonGuardar.setToolTipText("Guardar Keyframes ");
        botonGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        jToolBar1.add(botonGuardar);

        botonFrames.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/iconos/save2.png"))); // NOI18N
        botonFrames.setToolTipText("Guardar Frames");
        botonFrames.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonFrames.setFocusable(false);
        botonFrames.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonFrames.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonFrames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFramesActionPerformed(evt);
            }
        });
        jToolBar1.add(botonFrames);

        botonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/iconos/play.png"))); // NOI18N
        botonPlay.setToolTipText("Reproducir Video");
        botonPlay.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonPlay.setFocusable(false);
        botonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPlayActionPerformed(evt);
            }
        });
        jToolBar1.add(botonPlay);

        botonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/iconos/pause.png"))); // NOI18N
        botonStop.setToolTipText("Pausar Video");
        botonStop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonStop.setFocusable(false);
        botonStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonStopActionPerformed(evt);
            }
        });
        jToolBar1.add(botonStop);

        botonReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/iconos/reset.png"))); // NOI18N
        botonReset.setToolTipText("Reiniciar Video");
        botonReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonReset.setFocusable(false);
        botonReset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonReset.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonResetActionPerformed(evt);
            }
        });
        jToolBar1.add(botonReset);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Progreso", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel7.setName(""); // NOI18N

        sliderVideoProgreso.setMaximum(150);
        sliderVideoProgreso.setToolTipText("Progreso del video");
        sliderVideoProgreso.setValue(0);
        sliderVideoProgreso.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderVideoProgreso.setPreferredSize(new java.awt.Dimension(125, 20));
        sliderVideoProgreso.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVideoProgresoStateChanged(evt);
            }
        });
        jPanel7.add(sliderVideoProgreso);

        jToolBar1.add(jPanel7);

        tiempo.setText("0:00");
        tiempo.setToolTipText("");
        jToolBar1.add(tiempo);

        botonKeyframes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/iconos/keyFrame.png"))); // NOI18N
        botonKeyframes.setToolTipText("Obtener KeyFrames");
        botonKeyframes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonKeyframes.setFocusable(false);
        botonKeyframes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonKeyframes.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonKeyframes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonKeyframesActionPerformed(evt);
            }
        });
        jToolBar1.add(botonKeyframes);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "K", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        sliderK.setMinimum(20);
        sliderK.setPaintLabels(true);
        sliderK.setToolTipText("K");
        sliderK.setValue(63);
        sliderK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderK.setName("K"); // NOI18N
        sliderK.setPreferredSize(new java.awt.Dimension(80, 20));
        sliderK.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderKStateChanged(evt);
            }
        });
        jPanel3.add(sliderK);

        jToolBar1.add(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Umbral Similitud", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        sliderUmbralSim.setMaximum(10);
        sliderUmbralSim.setPaintLabels(true);
        sliderUmbralSim.setSnapToTicks(true);
        sliderUmbralSim.setToolTipText("Umbral de similitud");
        sliderUmbralSim.setValue(4);
        sliderUmbralSim.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderUmbralSim.setPreferredSize(new java.awt.Dimension(80, 20));
        sliderUmbralSim.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderUmbralSimStateChanged(evt);
            }
        });
        jPanel4.add(sliderUmbralSim);

        jToolBar1.add(jPanel4);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Intervalo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        sliderIntervalo.setMaximum(24);
        sliderIntervalo.setMinimum(1);
        sliderIntervalo.setPaintLabels(true);
        sliderIntervalo.setToolTipText("Intervalo entre frames");
        sliderIntervalo.setValue(2);
        sliderIntervalo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderIntervalo.setPreferredSize(new java.awt.Dimension(80, 20));
        sliderIntervalo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderIntervaloStateChanged(evt);
            }
        });
        jPanel5.add(sliderIntervalo);

        jToolBar1.add(jPanel5);

        botonComparar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/iconos/comparar.png"))); // NOI18N
        botonComparar.setToolTipText("Comparar");
        botonComparar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonComparar.setFocusable(false);
        botonComparar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonComparar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonComparar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCompararActionPerformed(evt);
            }
        });
        jToolBar1.add(botonComparar);

        spinerNumResultados.setToolTipText("Numero de resultados");
        spinerNumResultados.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        spinerNumResultados.setMinimumSize(new java.awt.Dimension(64, 25));
        spinerNumResultados.setOpaque(true);
        spinerNumResultados.setPreferredSize(new java.awt.Dimension(64, 25));
        spinerNumResultados.setValue(5);
        spinerNumResultados.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinerNumResultadosStateChanged(evt);
            }
        });
        jToolBar1.add(spinerNumResultados);

        listaDescriptores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MPEG7ScalableColor", "MPEG7ColorStructure", "SingleColorDescriptor" }));
        listaDescriptores.setToolTipText("Descriptor");
        listaDescriptores.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        listaDescriptores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaDescriptoresActionPerformed(evt);
            }
        });
        jToolBar1.add(listaDescriptores);

        jPanel1.add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("New");
        jMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        botonAbrirImagen2.setText("Image");
        botonAbrirImagen2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonAbrirImagen2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirImagen2ActionPerformed(evt);
            }
        });
        jMenu1.add(botonAbrirImagen2);

        botonAbrirVideo2.setText("Video");
        botonAbrirVideo2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonAbrirVideo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirVideo2ActionPerformed(evt);
            }
        });
        jMenu1.add(botonAbrirVideo2);
        jMenu1.add(jSeparator1);

        clearAll.setText("Clear All");
        clearAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });
        jMenu1.add(clearAll);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * Obtener la ventana interna de video actual
     * @return ventana actual de video
     */
    public VentanaInternaVideo getVentanaInternaVideo() {
        if (escritorio.getSelectedFrame() instanceof VentanaInternaVideo) {
            VentanaInternaVideo vi = (VentanaInternaVideo) escritorio.getSelectedFrame();
            return vi;
        }else if (escritorio.getSelectedFrame() instanceof VentanaInterna){
            VentanaInterna vi2 = (VentanaInterna) escritorio.getSelectedFrame();
            return vi2.getviV_asociada();
        }else{
            return null;
        }
    }
    
    
    /**
     * Obtener la ventana interna actual
     * @return ventana actual 
     */
    public VentanaInterna getVentanaInterna() {
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        return vi != null ? vi : null;
    }
    
    
    /**
     * Obtener la ventana interna mixta actual
     * @return ventana actual mixta 
     */
    public VentanaInternaMix getVentanaInternaMix() {
        VentanaInternaMix vi = (VentanaInternaMix) escritorio.getSelectedFrame();
        return vi != null ? vi : null;
    }
    
    
    /**
     * Obtener el descriptor usado por defecto en la clase KeyFrameDescriptor
     * @return descriptor
     */
    public static Class getFrameDescri() {
       return DEFAULT_FRAME_DESCRIPTOR;
    }
    
    /**
     * Establecer el descriptor para usar por defecto 
     * @param d Descriptor
     */
    public void setFrameDescri(Class d) {
        DEFAULT_FRAME_DESCRIPTOR = d;
    }
      
    /**
     * Obtener la cantidad de resultados que se mostrarán al hacer la busqueda de similares
     * @return 
     */      
    public int getnumResultados() {
       return numResultados;
    }
    
    /**
     * Establecer la cantidad de resultados que se mostrarán al hacer la busqueda de similares
     * @param n cantidad
     */
    public void setnumResultados(int n) {
        numResultados = n;
    }
    
    /**
     * Saber si se esta analizando una imagen o un video
     * @return True si es una imagen, False si es un video
     */
    public static boolean isImagen(){
        return isImage;
    }
    
   
    
    /**
     * Slider para cambiar el valor del intervalo en la extraccion de fotogramas clave
     * @param evt 
     */
    private void sliderIntervaloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderIntervaloStateChanged
        VS.setIntervalo(sliderIntervalo.getValue());
    }//GEN-LAST:event_sliderIntervaloStateChanged

    
    /**
     * Slider para cambiar el valor del umbral de similitud en la extraccion de fotogramas clave
     * @param evt 
     */
    private void sliderUmbralSimStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderUmbralSimStateChanged
        VS.setUmbral_similitud(sliderUmbralSim.getValue());
    }//GEN-LAST:event_sliderUmbralSimStateChanged

    
    /**
     * Slider para cambiar el valor de K en la extraccion de fotogramas clave
     * @param evt 
     */
    private void sliderKStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderKStateChanged
        VS.setK(sliderK.getValue());
    }//GEN-LAST:event_sliderKStateChanged

    
    /**
     * Creacion de fotogramas clave a partir de un video 
     * @param evt 
     */
    private void botonKeyframesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonKeyframesActionPerformed
        Cursor originalCursor = getCursor();                                                        // Guardar el cursor original
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)); 

        List<BufferedImage> imagesList;  
        VentanaInternaVideo viV = getVentanaInternaVideo();
        LinkedHashMap<Integer, Mat> Dic_Key = new LinkedHashMap<>();
        File f; 
        
        if (isImagen()){
            f = new File(VS.getfilePath());
            Dic_Key = calculo_Keyframes(VS.getfilePath(),  VS.getK(), VS.getUmbral_similitud()/10.0, VS.getIntervalo());
        }else{
            f = new File(viV.getVideo().getAbsolutePath());
            Dic_Key = calculo_Keyframes(viV.getVideo().getAbsolutePath(),  VS.getK(), VS.getUmbral_similitud()/10.0, VS.getIntervalo());
        }
        VS.setDic_Key(Dic_Key);
        
      
        List<Mat> list_keyF = new ArrayList<>(Dic_Key.values()); 
        imagesList = mostrar_Frames(list_keyF);

        VentanaInterna vi = new VentanaInterna();
        vi.getLienzo().setImages(imagesList);
        this.escritorio.add(vi);
        vi.setSize(700,350);
        vi.setVisible(true);
        vi.setLocation(5, 365);
        if(viV != null){ vi.setviV_asociada(viV); }
        vi.setTitle("KeyFrames " + f.getName()); 
        
        setCursor(originalCursor);
    }//GEN-LAST:event_botonKeyframesActionPerformed

    
    /**
     * Guardar en una carpeta los fotogramas clave obtenidos de un video
     * @param evt 
     */
    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        guardar_KeyFrames(VS.getDic_Key(),  getVentanaInternaVideo().getVideo()); 
    }//GEN-LAST:event_botonGuardarActionPerformed

    
    /**
     * Parar la reproduccion de un video
     * @param evt 
     */
    private void botonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStopActionPerformed
        if (getVentanaInternaVideo() != null){
            getVentanaInternaVideo().stop();
        }
    }//GEN-LAST:event_botonStopActionPerformed

    
    /**
     * Dividir un video en frames y guardarlos en una carpeta
     * @param evt 
     */
    private void botonFramesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFramesActionPerformed
        leer_video_guardar(getVentanaInternaVideo().getVideo());
    }//GEN-LAST:event_botonFramesActionPerformed

    
    /**
     * Slider con la duracion del video y su progreso, ajustable dinamicamente
     * @param evt 
     */
    private void sliderVideoProgresoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVideoProgresoStateChanged
        if (sliderVideoProgreso.getValueIsAdjusting()) {
            isAdjusting = true;
            int value = sliderVideoProgreso.getValue();
            long duration = getVentanaInternaVideo().getMediaPlayer().getLength();
            if (duration > 0) {
                long newTime = (value * duration) / sliderVideoProgreso.getMaximum();
                getVentanaInternaVideo().getMediaPlayer().setTime(newTime);
            }
        } else {
            isAdjusting = false;
        }
    }//GEN-LAST:event_sliderVideoProgresoStateChanged

    
    /**
     * Reinicia el video desde el inicio
     * @param evt 
     */
    private void botonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonResetActionPerformed
        getVentanaInternaVideo().getMediaPlayer().setTime(0);
        sliderVideoProgreso.setValue(0);
        actualizarTiempo(0);
        
        if (getVentanaInternaVideo().getMediaPlayer().isPlaying()) {
            getVentanaInternaVideo().getMediaPlayer().play();
        }
    }//GEN-LAST:event_botonResetActionPerformed

    
    /**
     * Reproduce el video
     * @param evt 
     */
    private void botonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPlayActionPerformed
        if (getVentanaInternaVideo() != null){
            getVentanaInternaVideo().play();
        }    
    }//GEN-LAST:event_botonPlayActionPerformed

    
    /**
     * Busqueda de videos similares en la BBDD al archivo cargado en base a la obtencion de sus descriptores
     * @param evt 
     */
    private void botonCompararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCompararActionPerformed
        recuperacionMultimedia("Escritorio");
    }//GEN-LAST:event_botonCompararActionPerformed

    
    
    
    /**
     * Abrir un nuevo archivo de video
     * @param evt 
     */
    private void botonAbrirVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirVideoActionPerformed
        JFileChooser dlg = new JFileChooser();
        dlg.setFileFilter(filtro_extension_Vid);
        dlg.setMultiSelectionEnabled(true);
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File[] files = dlg.getSelectedFiles();
                
                int contador = 0;
                for(File f : files){
                    
                    VS.setfilePath(f.getAbsolutePath()); 

                    String vlcLibraryPath = "C:/Program Files/VideoLAN/VLC";
                    NativeLibrary.addSearchPath("libvlc", vlcLibraryPath);
                    Native.loadLibrary("libvlc", LibVlc.class);

                    VentanaInternaVideo viV = new VentanaInternaVideo(f);
                    viV.addMediaPlayerEventListener(new VideoListener());
                    viV.addInternalFrameListener(new ManejadorVentanaInternaVideo());

                    this.escritorio.add(viV);
                    viV.setVisible(true);
                    viV.setSize(700,350);
                    viV.setTitle(f.getName());
                    viV.setLocation(5 + contador, 5 + contador);
                    viV.play();
                    contador += 40;

                    viV.getMediaPlayer().addMediaPlayerEventListener(new MediaPlayerEventAdapter() {

                    @Override
                    public void positionChanged(MediaPlayer mediaPlayer, float newPosition) {
                        if (!isAdjusting) {
                            int value = (int) (newPosition * sliderVideoProgreso.getMaximum());
                            sliderVideoProgreso.setValue(value);
                        }
                    }

                    @Override
                    public void timeChanged(MediaPlayer mediaPlayer, long newTime) {
                        if (!isAdjusting) {
                            long duration = mediaPlayer.getLength();
                            if (duration > 0) {
                                int value = (int) ((newTime * sliderVideoProgreso.getMaximum()) / duration);
                                sliderVideoProgreso.setValue(value);
                                actualizarTiempo(newTime);
                            }
                        }
                    }
                    });
                }                          
            } catch (Exception ex) {
                System.err.println("Error al leer el video");
            }
        }
    }//GEN-LAST:event_botonAbrirVideoActionPerformed

    
    /**
     * Listado con los posibles descriptores a usar
     * @param evt 
     */
    private void listaDescriptoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaDescriptoresActionPerformed
        switch (listaDescriptores.getSelectedIndex()) {
            case 0:
                setFrameDescri(MPEG7ScalableColor.class);
                break;
            case 1:
                setFrameDescri(MPEG7ColorStructure.class);
                break;
            case 2:
                setFrameDescri(SingleColorDescriptor.class);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_listaDescriptoresActionPerformed

    
    private void botonAbrirImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirImagenActionPerformed
        JFileChooser dlg = new JFileChooser();
        dlg.setFileFilter(filtro_extension_Img);                 // Filtro para definir el tipo de archivo
        dlg.setMultiSelectionEnabled(true);
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File[] files = dlg.getSelectedFiles();
                
                int contador=0;
                for (File f : files) {    
                    VS.setfilePath(f.getAbsolutePath()); 
                    List<BufferedImage> imagesList = new ArrayList<>(); 
                    BufferedImage img = ImageIO.read(f);
                    img = redimensionar_Imagen(img,350,350);
                    imagesList.add(img);     
                    VentanaInterna vi = new VentanaInterna();
                    vi.getLienzo().setImages(imagesList);
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                    vi.setSize(400,400);

                    vi.addInternalFrameListener(new ManejadorVentanaInterna());
                    vi.setLocation(5 + contador, 5 + contador);  
                    contador+=30;
                }
                
                isImage = true;

                String vlcLibraryPath = "C:/Program Files/VideoLAN/VLC";
                NativeLibrary.addSearchPath("libvlc", vlcLibraryPath);
                Native.loadLibrary("libvlc", LibVlc.class);
                

            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_botonAbrirImagenActionPerformed

    private void spinerNumResultadosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinerNumResultadosStateChanged
        if ((int) spinerNumResultados.getValue() < 1) {
            spinerNumResultados.setValue(1);
        }
        setnumResultados((int) spinerNumResultados.getValue());
    }//GEN-LAST:event_spinerNumResultadosStateChanged

    
    private void activarBotonesDB(boolean activar){
        this.botonNewDB.setEnabled(!activar);
        this.botonCloseDB.setEnabled(activar);
        this.botonAddRecord.setEnabled(activar);
        this.botonSearch.setEnabled(activar);
        this.botonOpenDB.setEnabled(!activar); 
        this.botonSaveDB.setEnabled(activar);   
    }
    
    
    private void botonNewDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNewDBActionPerformed
       // database = new ListDB(getFrameDescri());
        database = new ListDB(KeyFrameDescriptor.class);
        activarBotonesDB(true);
        //updateInfoDBStatusBar("New DB (not saved)");
    }//GEN-LAST:event_botonNewDBActionPerformed

    
    private void botonCloseDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCloseDBActionPerformed
        database.clear();
        database = null;
        activarBotonesDB(false);
        //updateInfoDBStatusBar(null);
    }//GEN-LAST:event_botonCloseDBActionPerformed

    
    /**
     * Incorporamos a la BBDD todas los archivos abiertos en el escritorio
     * @param evt 
     */
    private void botonAddRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAddRecordActionPerformed
        if (database != null) {
            java.awt.Cursor cursor = this.getCursor();
            setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
            
            JInternalFrame ventanas[] = escritorio.getAllFrames();
            List<VentanaInternaVideo> ventanasVideo = new ArrayList<>();
            
            for (JInternalFrame vi : ventanas) {
                if (vi instanceof VentanaInternaVideo) {
                    ventanasVideo.add((VentanaInternaVideo)vi);
                }
            }
 
            for (int i=0; i<ventanasVideo.size(); i++) {
                File videoFile = ventanasVideo.get(i).getVideo();
                KeyFrameCollection vid = leer_video(videoFile);
                VideoIteradorSVD it = new VideoIteradorSVD(vid, videoFile.getAbsolutePath());
                KeyFrameDescriptor descr = new KeyFrameDescriptor(vid, it, getFrameDescri());         
                
                                                                                                             
                                                                                     
                
                DescriptorList<Video> descripList = new DescriptorList<>(vid);                      ////////// ListDB<KeyFrameDescriptor> database = null;      
               
                descripList.add(descr);  
                
          /*      System.out.println("a: " + descripList.get(0));             
                System.out.println("a2: " + descripList.get(0).getSource());  
                System.out.println("b: " + descr);                                 
                System.out.println("b2: " + descr.getSource()); */
                 
                ListDB.Record rec = database.new Record(descr);
                database.add(rec);
                                                                                                                
                               
             
       

            }
            setCursor(cursor);
        //  updateInfoDBStatusBar("Updated DB (not saved)");
        }
    }//GEN-LAST:event_botonAddRecordActionPerformed
 
    
    private void botonOpenDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpenDBActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(null);
        if (resp == JFileChooser.APPROVE_OPTION) {
            File file = dlg.getSelectedFile();
            try {
                database = ListDB.open(file);
                activarBotonesDB(true);
            //    updateInfoDBStatusBar(file.getName());
            } catch (IOException | ClassNotFoundException ex) {
                System.err.println(ex);
            }
        }
    }//GEN-LAST:event_botonOpenDBActionPerformed

      
    private void botonSaveDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSaveDBActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(null);
        if (resp == JFileChooser.APPROVE_OPTION) {
            File file = dlg.getSelectedFile();
            try {
                database.save(file);
            //    updateInfoDBStatusBar(file.getName());
            } catch (IOException ex) {
                System.err.println(ex.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botonSaveDBActionPerformed

    
    private void botonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSearchActionPerformed
        
        recuperacionMultimedia("BBDD");
        
        /*if (database != null) {
            Cursor originalCursor = getCursor();                                                        // Guardar el cursor original
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)); 

            KeyFrameCollection vid = new KeyFrameCollection();
            if (isImagen()){                                                                              // Si se va a buscar sobre una imagen
                add_Imagen(getVentanaInterna().getLienzo().getImagesList(0), vid);       
            }else{                                                                                     // Si se va a buscar sobre un video
                if (VS.getDic_Key().isEmpty()){                                                        // Si no se han calculado los keyframes antes          
                    LinkedHashMap<Integer, Mat> Dic_Key = calculo_Keyframes(VS.getfilePath(),  VS.getK(), VS.getUmbral_similitud()/10.0, VS.getIntervalo()); 
                    VS.setDic_Key(Dic_Key);
                }
                vid = leer_video(getVentanaInternaVideo().getVideo());
            }

            VideoIteradorSVD it = new VideoIteradorSVD(vid, VS.getfilePath());
            KeyFrameDescriptor descr = new KeyFrameDescriptor(vid, it,getFrameDescri());
            VideoComparador VC = new VideoComparador();
            descr.setComparator(VC);

            HashMap<File,List<Double>> minimos = new HashMap<>();                   // <Video, <minimo, indice VX, indice V0>>        

            ////////////////////////////////////////////
            //
            //   creacion_DDBB();
            //
            ////////////////////////////////////////////


            
            List<BBDD.VideoData> database = BBDD.recuperar_DDBB();

            for (BBDD.VideoData videoData : database) {
                String fileName = videoData.getFileName();
                VideoIteradorSVD it2 = videoData.getIterador();
                KeyFrameDescriptor descr2 = videoData.getDescriptor();

                minimos.put(fileName, descr.compare(descr2));
            }
            


            String BBDD_DIRECTORIO = System.getProperty("user.dir") + "/test";
            File directory = new File(BBDD_DIRECTORIO);
            File[] videoFiles = directory.listFiles((dir, name) -> name.endsWith(".mp4"));

            for (File videoFile : videoFiles) {
                KeyFrameCollection vid2 = leer_video(videoFile);
                VideoIteradorSVD it2 = new VideoIteradorSVD(vid2, videoFile.getAbsolutePath());
                KeyFrameDescriptor descr2 = new KeyFrameDescriptor(vid2, it2, getFrameDescri());
                minimos.put(videoFile, descr.compare(descr2));
            }




            ///////////////////////////////////////////
            

            para cada video abierto en el escritorio, se mete en BBDD. en el boton add, creo el keyFrameDescriptor del video seleccionado y llamo al new de record (con su iterador)

            creo el descriptor, el record con ese descriptot, y eso lo llamo en el add (añado este record)

            boton de crear la lista que sera la bbdd, boton para guardar el video actual a la bdd, boton para guardar la bdd, para cerrar y guardar
            




            List<Map.Entry<File, List<Double>>> entries = new ArrayList<>(minimos.entrySet());
            entries.sort(Comparator.comparingDouble(entry -> entry.getValue().get(0)));
            Map<File, List<Double>> sortedMinimos = new LinkedHashMap<>();
            for (Map.Entry<File, List<Double>> entry : entries) {
                sortedMinimos.put(entry.getKey(), entry.getValue());
            }


            List<BufferedImage> lista_key_V0 = new ArrayList<>();                                     // Lista de imagenes de la fila 3 en la ventana interna (keyframe video original)
            List<BufferedImage> lista_key_VX = new ArrayList<>();                                     // Lista de imagenes de la fila 2 en la ventana interna (keyframe videos BBDD)
            List<File> files = new ArrayList<>(sortedMinimos.keySet());
            List<List<Double>> val = new ArrayList<>(sortedMinimos.values());
            List<File> lista_final = new ArrayList<>();


            for(int v = 0; v < getnumResultados(); v++){
                File vi = new File(files.get(v).getAbsolutePath());
                KeyFrameCollection vid3 = leer_video(vi);
                VideoIteradorSVD it3 = new VideoIteradorSVD(vid3, vi.getAbsolutePath());
                LinkedHashMap<Integer, Mat> ke = it3.getkeyf();

                List<Mat> keL_VX = new ArrayList<>(ke.values()); 
                double key_VX1 = val.get(v).get(1);
                int key_VX = (int)key_VX1;
                Mat extractedMat1 = keL_VX.get(key_VX);
                BufferedImage img1 = conversion_Mat2BufImg(extractedMat1);
                lista_key_VX.add(img1); 

                if (!isImagen()){
                    List<Mat> keL_V0 = new ArrayList<>(VS.getDic_Key().values());      
                    double key_V01 = val.get(v).get(2);
                    int key_V0 = (int)key_V01;
                    Mat extractedMat2 = keL_V0.get(key_V0);
                    BufferedImage img2 = conversion_Mat2BufImg(extractedMat2);
                    lista_key_V0.add(img2);
                }
                lista_final.add(vi);
            }    

            if(!isImagen()){
                lista_final.add(0, getVentanaInternaVideo().getVideo());
            }else{
                for(BufferedImage i: lista_key_VX){
                    lista_key_V0.add(getVentanaInterna().getLienzo().getImagesList(0));
                }
            }

            VentanaInternaMix vent = new VentanaInternaMix(lista_final, lista_key_VX, lista_key_V0); 
            this.escritorio.add(vent);
            vent.setSize(1050,750);
            vent.setVisible(true);
            vent.setTitle("Busqueda");
            vent.setLocation(800, 5);       

            setCursor(originalCursor);
        }*/
    }//GEN-LAST:event_botonSearchActionPerformed

    
    private void botonAbrirImagen2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirImagen2ActionPerformed
        botonAbrirImagenActionPerformed(evt);
    }//GEN-LAST:event_botonAbrirImagen2ActionPerformed

    private void botonAbrirVideo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirVideo2ActionPerformed
        botonAbrirVideoActionPerformed(evt);
    }//GEN-LAST:event_botonAbrirVideo2ActionPerformed

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
        JInternalFrame[] ventanas = escritorio.getAllFrames();
        for (JInternalFrame ventana : ventanas) {
            ventana.dispose();
        }
    }//GEN-LAST:event_clearAllActionPerformed

        
        
        
    
    /**
     * Actualizar de forma dinamica el tiempo de reproduccion del video actual
     * @param tiempoActual 
     */
    private void actualizarTiempo(long tiempoActual) {
        long minutos = TimeUnit.MILLISECONDS.toMinutes(tiempoActual);
        long segundos = TimeUnit.MILLISECONDS.toSeconds(tiempoActual) - TimeUnit.MINUTES.toSeconds(minutos);
        tiempo.setText(String.format("%d:%02d", minutos, segundos));
    }
    
    
    
    
    private void recuperacionMultimedia(String contenido){
        Cursor originalCursor = getCursor();                                                        // Guardar el cursor original
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        int num_result = getnumResultados();
    
        KeyFrameCollection vid = new KeyFrameCollection();
        if (isImagen()){                                                                              // Si se va a buscar sobre una imagen
            add_Imagen(getVentanaInterna().getLienzo().getImagesList(0), vid);       
        }else{                                                                                     // Si se va a buscar sobre un video
            if (VS.getDic_Key().isEmpty()){                                                        // Si no se han calculado los keyframes antes          
                LinkedHashMap<Integer, Mat> Dic_Key = calculo_Keyframes(VS.getfilePath(),  VS.getK(), VS.getUmbral_similitud()/10.0, VS.getIntervalo()); 
                VS.setDic_Key(Dic_Key);
            }
            vid = leer_video(getVentanaInternaVideo().getVideo());
        }
        
        VideoIteradorSVD it = new VideoIteradorSVD(vid, VS.getfilePath());
        KeyFrameDescriptor descr = new KeyFrameDescriptor(vid, it,getFrameDescri());
        VideoComparador VC = new VideoComparador();
        descr.setComparator(VC);
        
        HashMap<File,List<Double>> minimos = new HashMap<>();                                 // <Video, <minimo, indice VX, indice V0>>        
       
        
        if("Escritorio".equals(contenido)){                                             // Analisis y recuperacion de videos abiertos en el escritorio
            
            JInternalFrame ventanas[] = escritorio.getAllFrames();                               
            List<VentanaInternaVideo> ventanasVideo = new ArrayList<>();

            for (JInternalFrame vi : ventanas) {
                if (vi instanceof VentanaInternaVideo) {
                    ventanasVideo.add((VentanaInternaVideo)vi);
                }
            }

            for (int i=0; i<ventanasVideo.size(); i++) {                                                         // Se compara sobre los videos abiertos en el escritorio
                File videoFile = ventanasVideo.get(i).getVideo();
                KeyFrameCollection vid2 = leer_video(videoFile);
                VideoIteradorSVD it2 = new VideoIteradorSVD(vid2, videoFile.getAbsolutePath());
                KeyFrameDescriptor descr2 = new KeyFrameDescriptor(vid2, it2, getFrameDescri());
                minimos.put(videoFile, descr.compare(descr2));
            }
            
            if(ventanasVideo.size() < num_result){ num_result = ventanasVideo.size(); }
            
        }else if ("BBDD".equals(contenido)){                                                           // Se compara sobre los videos de la BBDD
            
            // recorrer BBDD obteniendo los descriptores
            // necesitaria tmb el File video
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            
        }
        

        
    
        List<Map.Entry<File, List<Double>>> entries = new ArrayList<>(minimos.entrySet());
        entries.sort(Comparator.comparingDouble(entry -> entry.getValue().get(0)));
        Map<File, List<Double>> sortedMinimos = new LinkedHashMap<>();
        for (Map.Entry<File, List<Double>> entry : entries) {
            sortedMinimos.put(entry.getKey(), entry.getValue());
        }
        
 
        List<BufferedImage> lista_key_V0 = new ArrayList<>();                                     // Lista de imagenes de la fila 3 en la ventana interna (keyframe video original)
        List<BufferedImage> lista_key_VX = new ArrayList<>();                                     // Lista de imagenes de la fila 2 en la ventana interna (keyframe videos BBDD)
        List<File> files = new ArrayList<>(sortedMinimos.keySet());
        List<List<Double>> val = new ArrayList<>(sortedMinimos.values());
        List<File> lista_final = new ArrayList<>();
   
        
        int eliminar_repetido = 0;                                     
        if("Escritorio".equals(contenido)){  eliminar_repetido = 1; }                              // Si se comparan con los videos del escritorio, no tenemos en cuenta el propio video seleccionado, que será el primero en la lista de files
        
        
        for(int v = 0 + eliminar_repetido; v < num_result; v++){
            File vi = new File(files.get(v).getAbsolutePath());
            KeyFrameCollection vid3 = leer_video(vi);
            VideoIteradorSVD it3 = new VideoIteradorSVD(vid3, vi.getAbsolutePath());
            LinkedHashMap<Integer, Mat> ke = it3.getkeyf();
            
            List<Mat> keL_VX = new ArrayList<>(ke.values()); 
            double key_VX1 = val.get(v).get(1);
            int key_VX = (int)key_VX1;
            Mat extractedMat1 = keL_VX.get(key_VX);
            BufferedImage img1 = conversion_Mat2BufImg(extractedMat1);
            lista_key_VX.add(img1); 
            
            if (!isImagen()){
                List<Mat> keL_V0 = new ArrayList<>(VS.getDic_Key().values());      
                double key_V01 = val.get(v).get(2);
                int key_V0 = (int)key_V01;
                Mat extractedMat2 = keL_V0.get(key_V0);
                BufferedImage img2 = conversion_Mat2BufImg(extractedMat2);
                lista_key_V0.add(img2);
            }
            lista_final.add(vi);
        }    
            
        if(!isImagen()){
            lista_final.add(0, getVentanaInternaVideo().getVideo());
        }else{
            for(BufferedImage i: lista_key_VX){
                lista_key_V0.add(getVentanaInterna().getLienzo().getImagesList(0));
            }
        }
        
        VentanaInternaMix vent = new VentanaInternaMix(lista_final, lista_key_VX, lista_key_V0); 
        this.escritorio.add(vent);
        vent.setSize(1050,750);
        vent.setVisible(true);
        vent.setTitle("Busqueda");
        vent.setLocation(800, 5);       
        
        setCursor(originalCursor);
    }
    
    
    
    
    
    public class ManejadorVentanaInternaVideo extends InternalFrameAdapter {

        /**
         * Establecer parametros cunado una ventana de video gana el foco
         * @param evt 
         */
        public void internalFrameActivated(InternalFrameEvent evt) {                                     
            VentanaInternaVideo vi = (VentanaInternaVideo) evt.getInternalFrame();       
            VS.setfilePath(vi.getVideo().getAbsolutePath());
            sliderK.setValue(VS.getK());
            sliderUmbralSim.setValue((int) VS.getUmbral_similitud());
            sliderIntervalo.setValue(VS.getIntervalo());
            isImage = false;
        }
      
        
        /**
         * Establecer parametros por defecto cuando la ventana de video pierde el foco
         * @param evt 
         */
        public void internalFrameClosing(InternalFrameEvent evt) {                                      
            sliderK.setValue(63);
            sliderUmbralSim.setValue(4);
            sliderIntervalo.setValue(2);
            sliderVideoProgreso.setValue(0);
            actualizarTiempo(0);
            getVentanaInternaVideo().stop();
        }
    }
    
    
    
    
    
    public class ManejadorVentanaInterna extends InternalFrameAdapter {

        /**
         * Establecer parametros cunado una ventana gana el foco
         * @param evt 
         */
        public void internalFrameActivated(InternalFrameEvent evt) {                                    
            sliderK.setValue(VS.getK());
            sliderUmbralSim.setValue((int) VS.getUmbral_similitud());
            sliderIntervalo.setValue(VS.getIntervalo());
            isImage = true;
        }
      
        
        /**
         * Establecer parametros por defecto cuando la ventana pierde el foco
         * @param evt 
         */
        public void internalFrameClosing(InternalFrameEvent evt) {                                      
            sliderK.setValue(63);
            sliderUmbralSim.setValue(4);
            sliderIntervalo.setValue(2);
            sliderVideoProgreso.setValue(0);
            isImage = false;
        }
    }
    
    
    
    
    private class VideoListener extends MediaPlayerEventAdapter { 
        
        public void playing(MediaPlayer mediaPlayer) {
          //  botonStop.setEnabled(true);
         //   botonPlay.setEnabled(false);
        }

        public void paused(MediaPlayer mediaPlayer) {
         //   botonStop.setEnabled(false);
         //   botonPlay.setEnabled(true);
        }

        public void finished(MediaPlayer mediaPlayer) {
          //  this.paused(mediaPlayer);
        }
   }
   
  
 
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAbrirImagen;
    private javax.swing.JMenuItem botonAbrirImagen2;
    private javax.swing.JButton botonAbrirVideo;
    private javax.swing.JMenuItem botonAbrirVideo2;
    private javax.swing.JButton botonAddRecord;
    private javax.swing.JButton botonCloseDB;
    private javax.swing.JButton botonComparar;
    private javax.swing.JButton botonFrames;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonKeyframes;
    private javax.swing.JButton botonNewDB;
    private javax.swing.JButton botonOpenDB;
    private javax.swing.JButton botonPlay;
    private javax.swing.JButton botonReset;
    private javax.swing.JButton botonSaveDB;
    private javax.swing.JButton botonSearch;
    private javax.swing.JButton botonStop;
    private javax.swing.JMenuItem clearAll;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox<String> listaDescriptores;
    private javax.swing.JSlider sliderIntervalo;
    private javax.swing.JSlider sliderK;
    private javax.swing.JSlider sliderUmbralSim;
    private javax.swing.JSlider sliderVideoProgreso;
    private javax.swing.JSpinner spinerNumResultados;
    private javax.swing.JLabel tiempo;
    // End of variables declaration//GEN-END:variables
}

