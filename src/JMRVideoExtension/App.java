package JMRVideoExtension;


import JMRVideoExtension.functions.DataBase;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import java.awt.image.BufferedImage;
import java.awt.Cursor;
import javax.imageio.ImageIO;
import uk.co.caprica.vlcj.binding.LibVlc;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;
import JMRVideoExtension.iu.InternalWindowMix;
import JMRVideoExtension.iu.InternalWindowVideo;
import JMRVideoExtension.iu.InternalWindow;
import JMRVideoExtension.functions.VideoComparator;
import JMRVideoExtension.functions.VideoIteratorSVD;
import JMRVideoExtension.functions.VideoSegmentationOp;
import static JMRVideoExtension.functions.VideoIOVLC.conversionMat2BufImg;
import static JMRVideoExtension.functions.VideoIOVLC.saveKeyFrames;
import static JMRVideoExtension.functions.VideoIOVLC.readVideo;
import static JMRVideoExtension.functions.VideoIOVLC.readSaveVideo;
import static JMRVideoExtension.functions.VideoIOVLC.addImage;
import java.io.IOException;
import jmr.descriptor.color.MPEG7ColorStructure;
import jmr.descriptor.color.MPEG7ScalableColor;
import jmr.descriptor.color.SingleColorDescriptor;
import jmr.video.KeyFrameDescriptor;
import jmr.video.FrameCollection;
import static JMRVideoExtension.functions.VideoSegmentationOp.calculationOfKeyFrames;
import java.awt.Graphics2D;
import java.awt.Image;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 *
 * @author David Martinez Domingo
 */

public class App extends javax.swing.JFrame {

    
    /**
     * Constructor
     */
    public App() {
        initComponents();
        this.setSize(1920, 1020);
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        activateButtonsDB(false);
    }
    
    
    
    private final int CONST_K = 63;
    private final double CONST_SIMILARITY_THRESHOLD = 4;
    private final int CONST_RANGE = 2;
    private final int CONST_NUM_RESULTS = 5;
    private final Class DEFAULT_FRAME_DESCRIPTOR = MPEG7ScalableColor.class;
    
    
    /**
     * Filter extensions
     */
    FileNameExtensionFilter filterImageExtension = new FileNameExtensionFilter("Image File ( jpg, jpeg, gif, png )", "jpg", "jpeg", "gif", "png");    
    FileNameExtensionFilter filterVideoExtension = new FileNameExtensionFilter("Video File ( mp4 )", "mp4");    
    
    
    /**
     * Boolean that checks if the video playback time slider is adjusting
     */
    private boolean isAdjusting = false;
    
    
    /**
     * Boolean to check if the open file is an image or a video
     */
    private static boolean isImage = false;
    
    
    /**
     * Object of the VideoSegmentacion class to obtain the default values ​​that will be in the layout
     */
    VideoSegmentationOp VS = new VideoSegmentationOp();
    
   
    /**
     * Descriptor used by default in the KeyFrameDescriptor class
     */                                       
    public Class frame_descriptor = DEFAULT_FRAME_DESCRIPTOR;
   
    
    /**
     * Number of results that will be displayed when searching for similar
     */
    private int numResults = CONST_NUM_RESULTS;
    

    /**
     * Name of the database file
     */
    private String database = null;   
    
    
    /**
     * Number of active databases
     */
    private int numDataBases = 0;
    
    

    
 
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        desktop = new javax.swing.JDesktopPane();
        jToolBar1 = new javax.swing.JToolBar();
        buttonOpenImage = new javax.swing.JButton();
        buttonOpenVideo = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel5 = new javax.swing.JLabel();
        buttonNewDB = new javax.swing.JButton();
        buttonCloseDB = new javax.swing.JButton();
        buttonAddRecord = new javax.swing.JButton();
        buttonSearchDB = new javax.swing.JButton();
        buttonOpenDB = new javax.swing.JButton();
        buttonSaveDB = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jLabel8 = new javax.swing.JLabel();
        buttonSaveKeyFrames = new javax.swing.JButton();
        buttonSaveFrames = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jLabel10 = new javax.swing.JLabel();
        buttonPlay = new javax.swing.JButton();
        buttonStop = new javax.swing.JButton();
        buttonReset = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        sliderVideoProgress = new javax.swing.JSlider();
        Time = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jLabel12 = new javax.swing.JLabel();
        buttonKeyFrames = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        sliderK = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        sliderSimilarityThreshold = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        sliderRange = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jLabel13 = new javax.swing.JLabel();
        buttonCompare = new javax.swing.JButton();
        spinerNumberOfResults = new javax.swing.JSpinner();
        ListDescriptorClass = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        buttonOpenImage2 = new javax.swing.JMenuItem();
        buttonOpenVideo2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        buttonResetParameters = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        buttonClearAll = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1463, Short.MAX_VALUE)
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 550, Short.MAX_VALUE)
        );

        jPanel1.add(desktop, java.awt.BorderLayout.CENTER);

        jToolBar1.setRollover(true);

        buttonOpenImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/abrirImagen.png"))); // NOI18N
        buttonOpenImage.setToolTipText("Open Image");
        buttonOpenImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonOpenImage.setFocusable(false);
        buttonOpenImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonOpenImage.setMinimumSize(new java.awt.Dimension(32, 30));
        buttonOpenImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonOpenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenImageActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonOpenImage);

        buttonOpenVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/abrirVideo.png"))); // NOI18N
        buttonOpenVideo.setToolTipText("Open Video");
        buttonOpenVideo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonOpenVideo.setFocusable(false);
        buttonOpenVideo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonOpenVideo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonOpenVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenVideoActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonOpenVideo);

        jLabel6.setText(" ");
        jToolBar1.add(jLabel6);
        jToolBar1.add(jSeparator2);

        jLabel5.setText(" ");
        jToolBar1.add(jLabel5);

        buttonNewDB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/databaseNew.png"))); // NOI18N
        buttonNewDB.setToolTipText("Create new DataBase");
        buttonNewDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonNewDB.setFocusable(false);
        buttonNewDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonNewDB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonNewDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewDBActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonNewDB);

        buttonCloseDB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/databaseClose.png"))); // NOI18N
        buttonCloseDB.setToolTipText("Close DataBase");
        buttonCloseDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonCloseDB.setFocusable(false);
        buttonCloseDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCloseDB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonCloseDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCloseDBActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonCloseDB);

        buttonAddRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/databaseAdd.png"))); // NOI18N
        buttonAddRecord.setToolTipText("Add file to DataBase");
        buttonAddRecord.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonAddRecord.setFocusable(false);
        buttonAddRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonAddRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonAddRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddRecordActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonAddRecord);

        buttonSearchDB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/databaseSearch.png"))); // NOI18N
        buttonSearchDB.setToolTipText("Search in DataBase");
        buttonSearchDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSearchDB.setFocusable(false);
        buttonSearchDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonSearchDB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonSearchDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchDBActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonSearchDB);

        buttonOpenDB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/databaseOpen.png"))); // NOI18N
        buttonOpenDB.setToolTipText("Open DataBase");
        buttonOpenDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonOpenDB.setFocusable(false);
        buttonOpenDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonOpenDB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonOpenDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenDBActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonOpenDB);

        buttonSaveDB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/databaseSave.png"))); // NOI18N
        buttonSaveDB.setToolTipText("Save DataBase");
        buttonSaveDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSaveDB.setFocusable(false);
        buttonSaveDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonSaveDB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonSaveDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveDBActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonSaveDB);

        jLabel7.setText(" ");
        jToolBar1.add(jLabel7);
        jToolBar1.add(jSeparator3);

        jLabel8.setText(" ");
        jToolBar1.add(jLabel8);

        buttonSaveKeyFrames.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/savekey.png"))); // NOI18N
        buttonSaveKeyFrames.setToolTipText("Save KeyFrames");
        buttonSaveKeyFrames.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSaveKeyFrames.setFocusable(false);
        buttonSaveKeyFrames.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonSaveKeyFrames.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonSaveKeyFrames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveKeyFramesActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonSaveKeyFrames);

        buttonSaveFrames.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/save2.png"))); // NOI18N
        buttonSaveFrames.setToolTipText("Save Frames");
        buttonSaveFrames.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSaveFrames.setFocusable(false);
        buttonSaveFrames.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonSaveFrames.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonSaveFrames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveFramesActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonSaveFrames);

        jLabel9.setText(" ");
        jToolBar1.add(jLabel9);
        jToolBar1.add(jSeparator4);

        jLabel10.setText(" ");
        jToolBar1.add(jLabel10);

        buttonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/play.png"))); // NOI18N
        buttonPlay.setToolTipText("Play Video");
        buttonPlay.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonPlay.setFocusable(false);
        buttonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlayActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonPlay);

        buttonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/pause.png"))); // NOI18N
        buttonStop.setToolTipText("Stop Video");
        buttonStop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonStop.setFocusable(false);
        buttonStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonStop);

        buttonReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/reset.png"))); // NOI18N
        buttonReset.setToolTipText("Reset Video");
        buttonReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonReset.setFocusable(false);
        buttonReset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonReset.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonReset);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/time.png"))); // NOI18N
        jLabel1.setToolTipText("Video Progress");
        jToolBar1.add(jLabel1);

        sliderVideoProgress.setMaximum(150);
        sliderVideoProgress.setToolTipText("Video Progress");
        sliderVideoProgress.setValue(0);
        sliderVideoProgress.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderVideoProgress.setPreferredSize(new java.awt.Dimension(125, 20));
        sliderVideoProgress.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVideoProgressStateChanged(evt);
            }
        });
        jToolBar1.add(sliderVideoProgress);

        Time.setText("0:00");
        Time.setToolTipText("");
        jToolBar1.add(Time);

        jLabel11.setText(" ");
        jToolBar1.add(jLabel11);
        jToolBar1.add(jSeparator5);

        jLabel12.setText(" ");
        jToolBar1.add(jLabel12);

        buttonKeyFrames.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/keyFrame.png"))); // NOI18N
        buttonKeyFrames.setToolTipText("Get KeyFrames");
        buttonKeyFrames.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonKeyFrames.setFocusable(false);
        buttonKeyFrames.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonKeyFrames.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonKeyFrames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonKeyFramesActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonKeyFrames);

        jLabel14.setText(" ");
        jToolBar1.add(jLabel14);

        sliderK.setMinimum(20);
        sliderK.setPaintLabels(true);
        sliderK.setToolTipText("K");
        sliderK.setValue(63);
        sliderK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderK.setName("K"); // NOI18N
        sliderK.setPreferredSize(new java.awt.Dimension(80, 20));
        sliderK.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderKStateChanged(evt);
            }
        });
        jToolBar1.add(sliderK);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/k.png"))); // NOI18N
        jLabel3.setText("      ");
        jLabel3.setToolTipText("K");
        jToolBar1.add(jLabel3);

        sliderSimilarityThreshold.setMaximum(10);
        sliderSimilarityThreshold.setPaintLabels(true);
        sliderSimilarityThreshold.setSnapToTicks(true);
        sliderSimilarityThreshold.setToolTipText("Similarity Threshold");
        sliderSimilarityThreshold.setValue(4);
        sliderSimilarityThreshold.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderSimilarityThreshold.setPreferredSize(new java.awt.Dimension(80, 20));
        sliderSimilarityThreshold.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderSimilarityThresholdStateChanged(evt);
            }
        });
        jToolBar1.add(sliderSimilarityThreshold);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/threshold.png"))); // NOI18N
        jLabel2.setText("      ");
        jLabel2.setToolTipText("Similarity Threshold");
        jToolBar1.add(jLabel2);

        sliderRange.setMaximum(24);
        sliderRange.setMinimum(1);
        sliderRange.setPaintLabels(true);
        sliderRange.setToolTipText("Range between frames");
        sliderRange.setValue(2);
        sliderRange.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderRange.setPreferredSize(new java.awt.Dimension(80, 20));
        sliderRange.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRangeStateChanged(evt);
            }
        });
        jToolBar1.add(sliderRange);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/range.png"))); // NOI18N
        jLabel4.setText("      ");
        jLabel4.setToolTipText("Range between frames");
        jToolBar1.add(jLabel4);
        jToolBar1.add(jSeparator6);

        jLabel13.setText(" ");
        jToolBar1.add(jLabel13);

        buttonCompare.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JMRVideoExtension/icons/comparar.png"))); // NOI18N
        buttonCompare.setToolTipText("Compare in Desktop");
        buttonCompare.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonCompare.setFocusable(false);
        buttonCompare.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCompare.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonCompare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCompareActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonCompare);

        spinerNumberOfResults.setToolTipText("Number of result");
        spinerNumberOfResults.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        spinerNumberOfResults.setMinimumSize(new java.awt.Dimension(64, 25));
        spinerNumberOfResults.setOpaque(true);
        spinerNumberOfResults.setPreferredSize(new java.awt.Dimension(64, 25));
        spinerNumberOfResults.setValue(5);
        spinerNumberOfResults.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinerNumberOfResultsStateChanged(evt);
            }
        });
        jToolBar1.add(spinerNumberOfResults);

        ListDescriptorClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MPEG7ScalableColor", "MPEG7ColorStructure", "SingleColorDescriptor" }));
        ListDescriptorClass.setToolTipText("Descriptor Class");
        ListDescriptorClass.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ListDescriptorClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListDescriptorClassActionPerformed(evt);
            }
        });
        jToolBar1.add(ListDescriptorClass);

        jPanel1.add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("New");
        jMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        buttonOpenImage2.setText("Image");
        buttonOpenImage2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonOpenImage2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenImage2ActionPerformed(evt);
            }
        });
        jMenu1.add(buttonOpenImage2);

        buttonOpenVideo2.setText("Video");
        buttonOpenVideo2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonOpenVideo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenVideo2ActionPerformed(evt);
            }
        });
        jMenu1.add(buttonOpenVideo2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        buttonResetParameters.setText("Reset Parameters");
        buttonResetParameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetParametersActionPerformed(evt);
            }
        });
        jMenu2.add(buttonResetParameters);
        jMenu2.add(jSeparator1);

        buttonClearAll.setText("Clear All");
        buttonClearAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearAllActionPerformed(evt);
            }
        });
        jMenu2.add(buttonClearAll);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * Get the current internal video window
     * @return current video window 
     */
    public InternalWindowVideo getInternalWindowVideo() {
        if (desktop.getSelectedFrame() instanceof InternalWindowVideo) {
            InternalWindowVideo internWindVid = (InternalWindowVideo) desktop.getSelectedFrame();
            return internWindVid;
        }else if (desktop.getSelectedFrame() instanceof InternalWindow){
            InternalWindow internWind = (InternalWindow) desktop.getSelectedFrame();
            return internWind.getIntWinVid_Asociate();
        }else{
            return null;
        }
    }
    
    
    /**
     * Get the current internal window
     * @return current window
     */
    public InternalWindow getInternalWindow() {
        InternalWindow internWind = (InternalWindow) desktop.getSelectedFrame();
        return internWind != null ? internWind : null;
    }
    
    
    /**
     * Get the current mixed internal window
     * @return mixed internal window
     */
    public InternalWindowMix getInternalWindowMix() {
        InternalWindowMix intenWindMix = (InternalWindowMix) desktop.getSelectedFrame();
        return intenWindMix != null ? intenWindMix : null;
    }
    
    

    public Class getFrameDescriptor() {
       return frame_descriptor;
    }
    
    public void setFrameDescriptor(Class d) {
        this.frame_descriptor = d;
    }
        
    public int getNumResults() {
       return numResults;
    }
    
    public void setNumResults(int n) {
        this.numResults = n;
    }
    
    public static boolean isImage(){
        return isImage;
    }
    
    public String getDataBase(){
        return database;
    }
    
    public void setDataBase(String datab){
        this.database = datab;
    }
    
    public int getNumDataBases(){
        return numDataBases;
    }
    
    public void setNumDataBases(int num){
        this.numDataBases = num;
    }
    
    public void increaseNumDataBases(){
        setNumDataBases(getNumDataBases() + 1);
    }
    
    public void decreaseNumDataBases(){
        setNumDataBases(getNumDataBases() - 1);
    }
   
    
    /**
     * Slider to change the interval value in keyframe extraction
     * @param evt 
     */
    private void sliderRangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRangeStateChanged
        VS.setRange(sliderRange.getValue());
    }//GEN-LAST:event_sliderRangeStateChanged

    
    /**
     * Slider to change the value of the similarity threshold in keyframe extraction
     * @param evt 
     */
    private void sliderSimilarityThresholdStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderSimilarityThresholdStateChanged
        VS.setSimilarityThreshold(sliderSimilarityThreshold.getValue());
    }//GEN-LAST:event_sliderSimilarityThresholdStateChanged

    
    /**
     * Slider to change the value of K in keyframe extraction
     * @param evt 
     */
    private void sliderKStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderKStateChanged
        VS.setK(sliderK.getValue());
    }//GEN-LAST:event_sliderKStateChanged

    
    /**
     * Creating keyframes from video
     * @param evt 
     */
    private void buttonKeyFramesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonKeyFramesActionPerformed
        Cursor originalCursor = getCursor();                                                        
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)); 

        List<BufferedImage> imagesList;  
        InternalWindowVideo intWinVid = getInternalWindowVideo();
        LinkedHashMap<Integer, Mat> Dic_Key = new LinkedHashMap<>();
        File f; 
        
        if (isImage()){
            f = new File(VS.getFilePath());
            Dic_Key = calculationOfKeyFrames(VS.getFilePath(),  VS.getK(), VS.getSimilarityThreshold()/10.0, VS.getRange());
        }else{
            f = new File(intWinVid.getVideo().getAbsolutePath());
            Dic_Key = calculationOfKeyFrames(intWinVid.getVideo().getAbsolutePath(),  VS.getK(), VS.getSimilarityThreshold()/10.0, VS.getRange());
        }
        VS.setDicKey(Dic_Key);
        
      
        List<Mat> list_keyF = new ArrayList<>(Dic_Key.values()); 
        imagesList = showFrames(list_keyF);

        InternalWindow intWin = new InternalWindow();
        intWin.getCanvas().setImages(imagesList);
        this.desktop.add(intWin);
        intWin.setSize(700,350);
        intWin.setVisible(true);
        intWin.setLocation(5, 365);
        if(intWinVid != null){ intWin.setIntWinVid_Asociate(intWinVid); }
        intWin.setTitle("KeyFrames " + f.getName()); 
        
        setCursor(originalCursor);
    }//GEN-LAST:event_buttonKeyFramesActionPerformed

    
    /**
     * Save keyframes obtained from a video to a folder
     * @param evt 
     */
    private void buttonSaveKeyFramesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveKeyFramesActionPerformed
        saveKeyFrames(VS.getDicKey(),  getInternalWindowVideo().getVideo()); 
    }//GEN-LAST:event_buttonSaveKeyFramesActionPerformed

    
    /**
     * Stop playing a video
     * @param evt 
     */
    private void buttonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
        if (getInternalWindowVideo() != null){
            getInternalWindowVideo().stop();
        }
    }//GEN-LAST:event_buttonStopActionPerformed

    
    /**
     * Split a video into frames and save them in a folder
     * @param evt 
     */
    private void buttonSaveFramesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveFramesActionPerformed
        readSaveVideo(getInternalWindowVideo().getVideo());
    }//GEN-LAST:event_buttonSaveFramesActionPerformed

    
    /**
     * Slider with the duration of the video and its progress, dynamically adjustable
     * @param evt 
     */
    private void sliderVideoProgressStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVideoProgressStateChanged
        if (sliderVideoProgress.getValueIsAdjusting()) {
            isAdjusting = true;
            int value = sliderVideoProgress.getValue();
            long duration = getInternalWindowVideo().getMediaPlayer().getLength();
            if (duration > 0) {
                long newTime = (value * duration) / sliderVideoProgress.getMaximum();
                getInternalWindowVideo().getMediaPlayer().setTime(newTime);
            }
        } else {
            isAdjusting = false;
        }
    }//GEN-LAST:event_sliderVideoProgressStateChanged

    
    /**
     * Restart the video from the beginning
     * @param evt 
     */
    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        getInternalWindowVideo().getMediaPlayer().setTime(0);
        sliderVideoProgress.setValue(0);
        updateTime(0);
        
        if (getInternalWindowVideo().getMediaPlayer().isPlaying()) {
            getInternalWindowVideo().getMediaPlayer().play();
        }
    }//GEN-LAST:event_buttonResetActionPerformed

    
    /**
     * Play video
     * @param evt 
     */
    private void buttonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlayActionPerformed
        if (getInternalWindowVideo() != null){
            getInternalWindowVideo().play();
        }    
    }//GEN-LAST:event_buttonPlayActionPerformed

    
    /**
     * Check similarities in the videos on desktop
     * @param evt 
     */
    private void buttonCompareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCompareActionPerformed
        videoRetrieval("Desktop");
    }//GEN-LAST:event_buttonCompareActionPerformed

    
    
    
    /**
     * Open a new video file
     * @param evt 
     */
    private void buttonOpenVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenVideoActionPerformed
        JFileChooser dlg = new JFileChooser();
        dlg.setFileFilter(filterVideoExtension);
        dlg.setMultiSelectionEnabled(true);
        String userDir = System.getProperty("user.dir");
        dlg.setCurrentDirectory(new File(userDir));
        
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File[] files = dlg.getSelectedFiles();
                
                int count = 0;
                for(File f : files){
                    
                    VS.setFilePath(f.getAbsolutePath()); 

                    String vlcLibraryPath = "C:/Program Files/VideoLAN/VLC";
                    NativeLibrary.addSearchPath("libvlc", vlcLibraryPath);
                    Native.loadLibrary("libvlc", LibVlc.class);

                    InternalWindowVideo intWinVid = new InternalWindowVideo(f);
                    intWinVid.addMediaPlayerEventListener(new VideoListener());
                    intWinVid.addInternalFrameListener(new HandlerWindowInternalVideo());

                    this.desktop.add(intWinVid);
                    intWinVid.setVisible(true);
                    intWinVid.setSize(700,350);
                    intWinVid.setTitle(f.getName());
                    intWinVid.setLocation(5 + count, 5 + count);
                    intWinVid.play();
                    count += 40;

                    intWinVid.getMediaPlayer().addMediaPlayerEventListener(new MediaPlayerEventAdapter() {

                    @Override
                    public void positionChanged(MediaPlayer mediaPlayer, float newPosition) {
                        if (!isAdjusting) {
                            int value = (int) (newPosition * sliderVideoProgress.getMaximum());
                            sliderVideoProgress.setValue(value);
                        }
                    }

                    @Override
                    public void timeChanged(MediaPlayer mediaPlayer, long newTime) {
                        if (!isAdjusting) {
                            long duration = mediaPlayer.getLength();
                            if (duration > 0) {
                                int value = (int) ((newTime * sliderVideoProgress.getMaximum()) / duration);
                                sliderVideoProgress.setValue(value);
                                updateTime(newTime);
                            }
                        }
                    }
                    });
                }                          
            } catch (Exception ex) {
                System.err.println("Error reading video");
            }
        }
    }//GEN-LAST:event_buttonOpenVideoActionPerformed

    
    /**
     * List with possible descriptors to use
     * @param evt 
     */
    private void ListDescriptorClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListDescriptorClassActionPerformed
        switch (ListDescriptorClass.getSelectedIndex()) {
            case 0:
                setFrameDescriptor(MPEG7ScalableColor.class);
                break;
            case 1:
                setFrameDescriptor(MPEG7ColorStructure.class);
                break;
            case 2:
                setFrameDescriptor(SingleColorDescriptor.class);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_ListDescriptorClassActionPerformed

    
    /**
     * Open a new image
     * @param evt 
     */
    private void buttonOpenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenImageActionPerformed
        JFileChooser dlg = new JFileChooser();
        dlg.setFileFilter(filterImageExtension);                
        dlg.setMultiSelectionEnabled(true);
        String userDir = System.getProperty("user.dir");
        dlg.setCurrentDirectory(new File(userDir));
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File[] files = dlg.getSelectedFiles();
                
                int counte=0;
                for (File f : files) {    
                    VS.setFilePath(f.getAbsolutePath()); 
                    List<BufferedImage> imagesList = new ArrayList<>(); 
                    BufferedImage img = ImageIO.read(f);
                    img = resizeImage(img,350,350);
                    imagesList.add(img);     
                    InternalWindow intWind = new InternalWindow();
                    intWind.getCanvas().setImages(imagesList);
                    this.desktop.add(intWind);
                    intWind.setTitle(f.getName());
                    intWind.setVisible(true);
                    intWind.setSize(400,400);

                    intWind.addInternalFrameListener(new HandlerWindowInternal());
                    intWind.setLocation(5 + counte, 5 + counte);  
                    counte+=30;
                }
                
                isImage = true;

                String vlcLibraryPath = "C:/Program Files/VideoLAN/VLC";
                NativeLibrary.addSearchPath("libvlc", vlcLibraryPath);
                Native.loadLibrary("libvlc", LibVlc.class);
                

            } catch (Exception ex) {
                System.err.println("Error reading image");
            }
        }
    }//GEN-LAST:event_buttonOpenImageActionPerformed

    
    /**
     * Number of results the UI will show
     * @param evt 
     */
    private void spinerNumberOfResultsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinerNumberOfResultsStateChanged
        if ((int) spinerNumberOfResults.getValue() < 1) {
            spinerNumberOfResults.setValue(1);
        }
        setNumResults((int) spinerNumberOfResults.getValue());
    }//GEN-LAST:event_spinerNumberOfResultsStateChanged

    
    
    /**
     * Enable and disable buttons
     * @param activate 
     */
    private void activateButtonsDB(boolean activate){
        this.buttonNewDB.setEnabled(!activate);
        this.buttonCloseDB.setEnabled(activate);
        this.buttonAddRecord.setEnabled(activate);
        this.buttonSearchDB.setEnabled(activate);
        this.buttonOpenDB.setEnabled(!activate); 
        this.buttonSaveDB.setEnabled(activate);   
    }
    
    
    /**
     * Create new DB
     * @param evt 
     */
    private void buttonNewDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewDBActionPerformed

       setDataBase(System.getProperty("user.dir") + "\\Database_files\\datos" + getNumDataBases() + ".dat");
       increaseNumDataBases();
       
       try {
            System.out.println("Database " + getDataBase() + " created.");
        } catch (Exception e) {
            System.err.println("Error creating database: " + e.getMessage());
        }
      
        activateButtonsDB(true);   
    }//GEN-LAST:event_buttonNewDBActionPerformed

    
    /**
     * Close the current DB
     * @param evt 
     */
    private void buttonCloseDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCloseDBActionPerformed
        setDataBase(null);
        System.out.println("Database closed.");
        activateButtonsDB(false);
    }//GEN-LAST:event_buttonCloseDBActionPerformed

    
    /**
     * We add all the files opened on the desktop to the DB
     * @param evt 
     */
    private void buttonAddRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddRecordActionPerformed

        java.awt.Cursor cursor = this.getCursor();
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
            
        JInternalFrame[] listWindows = desktop.getAllFrames();
        List<InternalWindowVideo> wiVideo = new ArrayList<>();
           
        for (JInternalFrame wi : listWindows) {
            if (wi instanceof InternalWindowVideo) {
                wiVideo.add((InternalWindowVideo)wi);
            }
        }
        
        ArrayList<DataBase> dataList = new ArrayList<>();                                   // Read existing data not to override
        if (getDataBase() != null) {
            File dbFile = new File(getDataBase());
            if (dbFile.exists() && dbFile.length() > 0) {
                try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(getDataBase()))) {
                    dataList = (ArrayList<DataBase>) ois.readObject();
                } catch (IOException | ClassNotFoundException e) {
                    e.printStackTrace();
                }
            }
        }
        
        for (int i=0; i<wiVideo.size(); i++) {
            File videoFile = wiVideo.get(i).getVideo(); 
            FrameCollection vid = readVideo(videoFile);
            VideoIteratorSVD it = new VideoIteratorSVD(vid, videoFile.getAbsolutePath());
            KeyFrameDescriptor descr = new KeyFrameDescriptor(vid, it, getFrameDescriptor());        
            
            dataList.add(new DataBase(videoFile, descr));   
        }
        
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(getDataBase()))) {
            oos.writeObject(dataList);
            System.out.println("Video/s added.");
        } catch (IOException e) {
            e.printStackTrace();
        }
                                                                                 
        setCursor(cursor);     
    }//GEN-LAST:event_buttonAddRecordActionPerformed
 
    
    /**
     * Open an existing DB
     * @param evt 
     */
    private void buttonOpenDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenDBActionPerformed
        
        JFileChooser dlg = new JFileChooser();
        String userDir = System.getProperty("user.dir");
        dlg.setCurrentDirectory(new File(userDir));
        int resp = dlg.showSaveDialog(null);
        if (resp == JFileChooser.APPROVE_OPTION) {
            File file = dlg.getSelectedFile();
            setDataBase(file.toString());
            System.out.println("Open database " + getDataBase());
            activateButtonsDB(true);
        }
    }//GEN-LAST:event_buttonOpenDBActionPerformed

      
    
    /**
     * Save the current DB
     * @param evt 
     */
    private void buttonSaveDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveDBActionPerformed
       
        JFileChooser dlg = new JFileChooser();
        String userDir = System.getProperty("user.dir");
        dlg.setCurrentDirectory(new File(userDir));
        int resp = dlg.showSaveDialog(null);
        ArrayList<DataBase> listD = new ArrayList<>();

        if (resp == JFileChooser.APPROVE_OPTION) {
            File file = dlg.getSelectedFile();
                   
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(getDataBase()))) {      
                listD = (ArrayList<DataBase>) ois.readObject();
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            }
            
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file))) {            
                oos.writeObject(listD);
                System.out.println("Database saved.");
            } catch (IOException e) {
                e.printStackTrace();
            } 
        }
    }//GEN-LAST:event_buttonSaveDBActionPerformed

    
    /**
     * Video retrieval on DB
     * @param evt 
     */
    private void buttonSearchDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchDBActionPerformed
        videoRetrieval("DB");                  
    }//GEN-LAST:event_buttonSearchDBActionPerformed

    
    /**
     * Another button to open an image
     * @param evt 
     */
    private void buttonOpenImage2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenImage2ActionPerformed
        buttonOpenImageActionPerformed(evt);
    }//GEN-LAST:event_buttonOpenImage2ActionPerformed

    
    /**
     * Another button to open a video
     * @param evt 
     */
    private void buttonOpenVideo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenVideo2ActionPerformed
        buttonOpenVideoActionPerformed(evt);
    }//GEN-LAST:event_buttonOpenVideo2ActionPerformed

    
    /**
     * Button to clear the entire desktop
     * @param evt 
     */
    private void buttonClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearAllActionPerformed
        JInternalFrame[] ventanas = desktop.getAllFrames();
        for (JInternalFrame ventana : ventanas) {
            ventana.dispose();
        }
    }//GEN-LAST:event_buttonClearAllActionPerformed

    private void buttonResetParametersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetParametersActionPerformed
        sliderK.setValue(CONST_K);
        sliderSimilarityThreshold.setValue((int) CONST_SIMILARITY_THRESHOLD);
        sliderRange.setValue(CONST_RANGE);
        spinerNumberOfResults.setValue(CONST_NUM_RESULTS);
        setNumResults(CONST_NUM_RESULTS);
        ListDescriptorClass.setSelectedIndex(0);
        setFrameDescriptor(DEFAULT_FRAME_DESCRIPTOR);
    }//GEN-LAST:event_buttonResetParametersActionPerformed

        
        
    /**
     * Actualizar de forma dinamica el tiempo de reproduccion del video actual
     * @param actualTime 
     */
    private void updateTime(long actualTime) {
        long minutes = TimeUnit.MILLISECONDS.toMinutes(actualTime);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(actualTime) - TimeUnit.MINUTES.toSeconds(minutes);
        Time.setText(String.format("%d:%02d", minutes, seconds));
    }
    
    
    
    
    /**
     * Method to search the similarities between KeyFrameDescriptors and find the videos
     * @param content 
     */
    private void videoRetrieval(String content){
        Cursor originalCursor = getCursor();                                                       
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        int num_result = getNumResults();
        int duplicated = 1;
    
        FrameCollection vid = new FrameCollection();
        if (isImage()){                                                                              // Search from an image
            addImage(getInternalWindow().getCanvas().getImagesList(0), vid);       
        }else{                                                                                     // Search from a video
            if (VS.getDicKey().isEmpty()){                                                        // If we have not the keyframes yet         
                LinkedHashMap<Integer, Mat> Dic_Key = calculationOfKeyFrames(VS.getFilePath(),  VS.getK(), VS.getSimilarityThreshold()/10.0, VS.getRange()); 
                VS.setDicKey(Dic_Key);
            }
            vid = readVideo(getInternalWindowVideo().getVideo());
        }
        
        VideoIteratorSVD it = new VideoIteratorSVD(vid, VS.getFilePath());
        KeyFrameDescriptor descr = new KeyFrameDescriptor(vid, it,getFrameDescriptor());
        VideoComparator VC = new VideoComparator();
        descr.setComparator(VC);
        
        HashMap<File,List<Double>> minimumList = new HashMap<>();                                 // <Video, <minimum, index VideoX, index VideoOrigin>>        
       
        
        if("Desktop".equals(content)){                                             // Desktop video retrieval
            
            JInternalFrame[] win = desktop.getAllFrames();                               
            List<InternalWindowVideo> winV = new ArrayList<>();

            for (JInternalFrame vi : win) {
                if (vi instanceof InternalWindowVideo) {
                    winV.add((InternalWindowVideo)vi);
                }
            }

            for (int i=0; i<winV.size(); i++) {                                                         // Compare from open video on desktop
                File videoFile = winV.get(i).getVideo();
                FrameCollection vid2 = readVideo(videoFile);
                VideoIteratorSVD it2 = new VideoIteratorSVD(vid2, videoFile.getAbsolutePath());
                KeyFrameDescriptor descr2 = new KeyFrameDescriptor(vid2, it2, getFrameDescriptor());
                minimumList.put(videoFile, descr.compare(descr2));
            }
            
            if(winV.size() <= num_result){ 
                num_result = winV.size(); 
                duplicated = 0;
            }
                 
            
        }else if ("DB".equals(content)){                                                           // DB video retrieval
            
            ArrayList<DataBase> listD = new ArrayList<>();
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(getDataBase()))) {      
                listD = (ArrayList<DataBase>) ois.readObject();
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            }
            
            for(DataBase data: listD){
                minimumList.put(data.getFile(), descr.compare(data.getKeyFrameDescriptor()));
            }   
        }
        

        
    
        List<Map.Entry<File, List<Double>>> entries = new ArrayList<>(minimumList.entrySet());
        entries.sort(Comparator.comparingDouble(entry -> entry.getValue().get(0)));
        Map<File, List<Double>> sortedMinimos = new LinkedHashMap<>();
        for (Map.Entry<File, List<Double>> entry : entries) {
            sortedMinimos.put(entry.getKey(), entry.getValue());
        }
        
 
        List<BufferedImage> listKeyVideoOriginal = new ArrayList<>();                              // List of images of row 3 in the internal window (original video keyframe)
        List<BufferedImage> listKeyVideoX = new ArrayList<>();                                     // List of images of row 2 in the internal window (DB video keyframe)
        List<File> files = new ArrayList<>(sortedMinimos.keySet());
        List<List<Double>> val = new ArrayList<>(sortedMinimos.values());
        List<File> finalList = new ArrayList<>();
   

            
        for(int v = 1; v < (num_result+duplicated); v++){                                     //v=1 we do not take into account the selected video itself, which will be the first in the list of files
            File vi = new File(files.get(v).getAbsolutePath());
            FrameCollection vid3 = readVideo(vi);
            VideoIteratorSVD it3 = new VideoIteratorSVD(vid3, vi.getAbsolutePath());
            LinkedHashMap<Integer, Mat> ke = it3.getkeyf();
            
            List<Mat> keL_VX = new ArrayList<>(ke.values()); 
            double key_VX1 = val.get(v).get(1);
            int key_VX = (int)key_VX1;
            Mat extractedMat1 = keL_VX.get(key_VX);
            BufferedImage img1 = conversionMat2BufImg(extractedMat1);
            listKeyVideoX.add(img1); 
            
            if (!isImage()){
                List<Mat> keL_VO = new ArrayList<>(VS.getDicKey().values());      
                double key_VO1 = val.get(v).get(2);
                int key_VO = (int)key_VO1;
                Mat extractedMat2 = keL_VO.get(key_VO);
                BufferedImage img2 = conversionMat2BufImg(extractedMat2);
                listKeyVideoOriginal.add(img2);
            }
            finalList.add(vi);
        }    
            
        if(!isImage()){
            finalList.add(0, getInternalWindowVideo().getVideo());
        }else{
            for(BufferedImage i: listKeyVideoX){
                listKeyVideoOriginal.add(getInternalWindow().getCanvas().getImagesList(0));
            }
        }
        
        InternalWindowMix wiMix = new InternalWindowMix(finalList, listKeyVideoX, listKeyVideoOriginal); 
        this.desktop.add(wiMix);
        wiMix.setSize(1050,750);
        wiMix.setVisible(true);
        wiMix.setTitle("Video Retrieval");
        wiMix.setLocation(800, 5);       
        
        setCursor(originalCursor);
    }
    

    
    /**
     * Receives a list from Mat, transforms them into images and displays them
     * @param list Mat List
     * @return images list
     */
    public static List<BufferedImage> showFrames(List<Mat> list){
        
        List<BufferedImage> imagesList = new ArrayList<>();
        for (Mat mat : list) {
            BufferedImage image = conversionMat2BufImg(mat);    
            image = resizeImage(image,280,300);
            imagesList.add(image);
        }
        return imagesList;
    }
   
    
   

    /**
     * Resize the original image
     * @param originalImage image to modify
     * @param targetWidth new width
     * @param targetHeight new height
     * @return image post-resize
     */
    public static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {
        
        Image resultingImage = originalImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);
        BufferedImage outputImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = outputImage.createGraphics();
        g2d.drawImage(resultingImage, 0, 0, null);
        g2d.dispose();
        return outputImage;
    }
    

    public class HandlerWindowInternalVideo extends InternalFrameAdapter {

        /**
         * Set parameters when a video window gains focus
         * @param evt 
         */
        public void internalFrameActivated(InternalFrameEvent evt) {                                     
            InternalWindowVideo vi = (InternalWindowVideo) evt.getInternalFrame();       
            VS.setFilePath(vi.getVideo().getAbsolutePath());
            sliderK.setValue(VS.getK());
            sliderSimilarityThreshold.setValue((int) VS.getSimilarityThreshold());
            sliderRange.setValue(VS.getRange());
            isImage = false;
        }
      
        
        /**
         * Set default parameters when video window loses focus
         * @param evt 
         */
        public void internalFrameClosing(InternalFrameEvent evt) {                                      
            sliderK.setValue(CONST_K);
            sliderSimilarityThreshold.setValue((int) CONST_SIMILARITY_THRESHOLD);
            sliderRange.setValue(CONST_RANGE);
            sliderVideoProgress.setValue(0);
            updateTime(0);
            getInternalWindowVideo().stop();
        }
    }
    
    
    
    
    
    public class HandlerWindowInternal extends InternalFrameAdapter {

        /**
         * Set parameters when a video window gains focus
         * @param evt 
         */
        public void internalFrameActivated(InternalFrameEvent evt) {                                    
            sliderK.setValue(VS.getK());
            sliderSimilarityThreshold.setValue((int) VS.getSimilarityThreshold());
            sliderRange.setValue(VS.getRange());
            isImage = true;
        }
      
        
        /**
         * Set default parameters when video window loses focus
         * @param evt 
         */
        public void internalFrameClosing(InternalFrameEvent evt) {                                      
            sliderK.setValue(CONST_K);
            sliderSimilarityThreshold.setValue((int) CONST_SIMILARITY_THRESHOLD);
            sliderRange.setValue(CONST_RANGE);
            sliderVideoProgress.setValue(0);
            isImage = false;
        }
    }
    
    
    
    
    private class VideoListener extends MediaPlayerEventAdapter { 
        
        public void playing(MediaPlayer mediaPlayer) {
          //  botonStop.setEnabled(true);
         //   botonPlay.setEnabled(false);
        }

        public void paused(MediaPlayer mediaPlayer) {
         //   botonStop.setEnabled(false);
         //   botonPlay.setEnabled(true);
        }

        public void finished(MediaPlayer mediaPlayer) {
          //  this.paused(mediaPlayer);
        }
   }
   
  
 
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ListDescriptorClass;
    private javax.swing.JLabel Time;
    private javax.swing.JButton buttonAddRecord;
    private javax.swing.JMenuItem buttonClearAll;
    private javax.swing.JButton buttonCloseDB;
    private javax.swing.JButton buttonCompare;
    private javax.swing.JButton buttonKeyFrames;
    private javax.swing.JButton buttonNewDB;
    private javax.swing.JButton buttonOpenDB;
    private javax.swing.JButton buttonOpenImage;
    private javax.swing.JMenuItem buttonOpenImage2;
    private javax.swing.JButton buttonOpenVideo;
    private javax.swing.JMenuItem buttonOpenVideo2;
    private javax.swing.JButton buttonPlay;
    private javax.swing.JButton buttonReset;
    private javax.swing.JMenuItem buttonResetParameters;
    private javax.swing.JButton buttonSaveDB;
    private javax.swing.JButton buttonSaveFrames;
    private javax.swing.JButton buttonSaveKeyFrames;
    private javax.swing.JButton buttonSearchDB;
    private javax.swing.JButton buttonStop;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JSlider sliderK;
    private javax.swing.JSlider sliderRange;
    private javax.swing.JSlider sliderSimilarityThreshold;
    private javax.swing.JSlider sliderVideoProgress;
    private javax.swing.JSpinner spinerNumberOfResults;
    // End of variables declaration//GEN-END:variables
}

